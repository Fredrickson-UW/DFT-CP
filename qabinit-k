#!/bin/sh


#
# SET VARIABLES
#
WD=`pwd`
SCRATCH="/scratch"
QUEUE="default"

NPROC=1
NODES=1
PPN=1

#
# PARSE ARGUMENTS
#
while [ $# -gt 0 ]
do
    case "$1" in
    (-*np) NPROC="$2"; shift;;
    (-*nodes) NODES="$2"; shift;;
    (-*ppn) PPN="$2"; shift;;
    (-*q) QUEUE="$2"; shift;;
    (-*charge) PBSOPTSS="-A $2" shift;;
    (-*f) FORCERENAME="1";;
    (-*emailwhendone) PBSOPTS="-m ae";;
    (-*) echo "Unrecognized Option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
    shift
done

#
# CHECK FOR INPUT FILE
#
INPUTFILE=$1
BASENAME=$2
echo "BASE NAME: $2"
INFILE_NAME="${BASENAME}.in"
LOGFILE_NAME="${BASENAME}.log"
OUTFILE_NAME="${BASENAME}.out"
CIFFILE_NAME="${BASENAME}.cif"
KMESH_INFILE_NAME="${BASENAME}_k.in"
KMESH_OUTFILE_NAME="${BASENAME}_k.out"
KMESH_LOGFILE_NAME="${BASENAME}_k.log"
OPTIONS_NAME="prepareABINIT-options-${BASENAME}"

if [ "$INPUTFILE" = "" ] || [ "$BASENAME" = "" ]
then
  echo "Usage: qabinit arguments inputfile.files base_name for calculation"
  echo "Optional arguments:"
  echo " -np [number of cores]"
  echo " -nodes [number of total nodes]"
  echo " -ppn [cores per node]"
  echo " -q [Queue Name] (Run job in queue [Queue Name])"
  echo " -f (force a rename of existing output .log file)"
  echo " -emailwhendone (email you when job completes, requires .forward file in
 home directory)"
  echo " -charge [group,fund number] (charge to group and fund, please provide both)"
  exit 1
fi

if [ ! -f $INFILE_NAME ]
then
  echo "The file $INFILE_NAME does not exist."
  echo "This script will first generate .in file for the calculation."
  if [ ! -f $OPTIONS_NAME ]
    then
    echo "No previous -OPTIONS file exists. Will ask for the options below"
    read -p "Do you wish to use the default settings for this calculation? [1=Yes] [2=No]   " default_flag
    echo "default flag: $default_flag"
    if [ $default_flag = 1 ]
    then
      echo "Using default for this calculation. Here are the default:"
      echo
      echo "1. Convert to primitive cell if the given cell is centered."
      echo "2. Use semicore pseudopotential only for 11 or 12 electron d-elements."
      echo "3. Use variable ngkpt to specify the K-points mesh."
      echo "4. Do not enable spin orbit coupling."
      echo
      convert_primitive_flag=1
      scvo_flag=1
      kmesh_flag=1
      SOC_flag=1
    elif [ $default_flag = 2 ]
    then
      echo "Not using default for this calculation."
      echo
      echo "Please specify your settings for this calculation below."
      read -p "Do you want ABINIT to convert to a primitive cell if current one is centered? [1=Yes] [2=No]    " convert_primitive_flag
      read -p "What kind of pseudopotential do you wish to use? [1=semicore only for 11 or 12 electron d-elements] [2=semicore when available]   " scvo_flag
      read -p "How do you want to specify your k-point mesh? [1=ngkpt] [2=kptrlatt]    " kmesh_flag
      read -p "Do you want to enable spin orbit coupling? [1=No] [2=Yes]   " SOC_flag
    else
      echo "Input must be 1 or 2. Exiting the shell script."
      exit 1
    fi
    echo "convert_primitive_flag: $convert_primitive_flag"
    echo "scvo_flag: $scvo_flag"
    echo "kmesh_flag: $kmesh_flag"
    echo "SOC_flag: $SOC_flag"
    echo 1 > OPTIONS
    echo 2 >> OPTIONS
    echo $convert_primitive_flag >> OPTIONS
    echo $scvo_flag >> OPTIONS
    echo $kmesh_flag >> OPTIONS
    echo $SOC_flag >> OPTIONS
    echo "Done setting up OPTIONS file."
  else
    echo "An old -OPTIONS file exists."
    echo "OPTIONS file will be set up automatically"
    read -p "Press enter to continue"
    echo 1 > OPTIONS
    cat $OPTIONS_NAME >> OPTIONS
  fi
  prepareAbinit7 $CIFFILE_NAME $BASENAME $USER $OPTCELL0_OUTFILE_NAME $OPTCELL0_INFILE_NAME < OPTIONS
  #echo "Your calculation has been setup."
  #echo "Look at the output, adjust accordingly and then rerun to submit the abinit calculation to the queue."
  exit 0
  else
  echo "ABINIT input files already exist."
  echo "If there is a kmesh folder or ngkpt_ETOT file, this calculation will overwrite them."
  read -p "Press enter to submit the ABINIT calculation to the queue."  
fi

rm -rf kmesh ngkpt_ETOT

echo "Your ABINIT k-point convergence calculation has been submitted."
echo "After the job is finished, you can check k-point mesh energy in ngkpt_ETOT_CONVERGENCE file if you use variable ngkpt"
echo "You can select k-point mesh from log file if you use variable kptrlatt"
echo "Afterwards, you should run geometry optimization with qabinit-opt"

OUTPUTFILE=${INPUTFILE%.?????}.log
JOBNAME=${INPUTFILE%.?????}

if [ ! -f $1 ]
then
  echo "File $1 not found!"
  exit 1
fi

if [ "$FORCERENAME" = "1" ]
then
  mv $OUTPUTFILE $OUTPUTFILE.`date +%s`
  echo "-f argument invoked!"
  echo "$OUTPUTFILE renamed to $OUTPUTFILE.`date +%s`"
elif [ -f $OUTPUTFILE ]
then
  echo "Output file with name $OUTPUTFILE exists."
  echo "Please rename .files input file ($1) or use the -f"
  echo "argument to force a rename."
  exit 1
fi

kmesh_flag=`tail -n 2 OPTIONS | head -n 1`
#
# PARSE AND SET NPROCS
#
if [ $NPROC -gt 20 ]
then
  if [ $NODES -eq 1 ]
    then
        echo "Please set number of nodes with the -nodes argument"
        exit
    fi
fi

PPN=$((NPROC/$NODES))
NPROC=$((PPN*$NODES))

if [ $NODES -gt 1 ]
then
	SCRATCH="/nfs/scratch"
fi


#
# SET PBS OPTIONS
#
OPTIONS="-o /dev/null -e /dev/null -q $QUEUE"
PBSOPTS="-N $JOBNAME -l nodes=$NODES:ppn=$PPN $PBSOPTS $PBSOPTSS"

#
# CREATE PBS INPUT FILE
#
TARGET=run.$$.sh

cat >> $TARGET << EOF
#!/bin/bash
#PBS $PBSOPTS

source /opt/intel/compilers_and_libraries_2017.1.132/linux/bin/compilervars.sh intel64
. /usr/mpi/openmpi_intel/2.0.1/bin/mpivars.sh 

cd $WD
cp -f $INPUTFILE /tmp/$INPUTFILE.$USER
sed 5s@.*@$SCRATCH/\$PBS_JOBID/tmp@ /tmp/$INPUTFILE.$USER > $INPUTFILE
mkdir -p $SCRATCH/\$PBS_JOBID

cat \`head -1 $INPUTFILE\` > $OUTPUTFILE

mpirun -n $NPROC /share/apps/abinit/bin/abinit < $INPUTFILE > $OUTPUTFILE
sleep 10 

rm -rf $SCRATCH/\$PBS_JOBID

mkdir kmesh

if [ $kmesh_flag = 1 ]
then
  grep etotal $OUTFILE_NAME > ngkpt_ETOT
  ngkpt_convergence ngkpt_ETOT $INFILE_NAME $OUTFILE_NAME
fi

cp * kmesh/.
rm *

cp kmesh/$LOGFILE_NAME $KMESH_LOGFILE_NAME
cp kmesh/$OUTFILE_NAME $KMESH_OUTFILE_NAME
cp kmesh/$CIFFILE_NAME .
cp kmesh/$OPTIONS_NAME .

if [ $kmesh_flag = 1 ]
then
  cp kmesh/ngkpt_ETOT .
  cp kmesh/ngkpt_ETOT_CONVERGENCE .
fi

EOF

# Submit the input file to PBS and clean up
qsub $OPTIONS $TARGET
rm $TARGET
