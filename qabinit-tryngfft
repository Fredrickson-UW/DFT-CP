#!/bin/sh

QUEUE="fredrickson"
NPROC=1
NODES=1
PPN=1

while [ $# -gt 0 ]
do
    case "$1" in
    (-*np) NPROC="$2"; shift;;
    (-*nodes) NODES="$2"; shift;;
    (-*ppn) PPN="$2"; shift;;
    (-*q) QUEUE="$2"; shift;;
    (-*charge) PBSOPTSS="-A $2" shift;;
    (-*f) FORCERENAME="1";;
    (-*emailwhendone) PBSOPTS="-m ae";;
    (-*) echo "Unrecognized Option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
    shift
done

echo "Queue: $QUEUE"
echo "Number of processors: $NPROC"

BASE_NAME=$1
FILES_FILE_exp="${BASE_NAME}_exp.files"
FILES_FILE_con="${BASE_NAME}_con.files"
FILES_FILE_eq="${BASE_NAME}.files"
LOG_FILE="${BASE_NAME}.log"
OUT_FILE="${BASE_NAME}.out"
NGFFT1=$2
NGFFT2=$3
NGFFT3=$4

echo "ngfft[1]: $NGFFT1"
echo "ngfft[2]: $NGFFT2"
echo "ngfft[3]: $NGFFT3"
echo "LOG_FILE NAME: $LOG_FILE"


if [ $# -ne 4 ] 
then
  echo "Usage: qabinit arguments <Base name> <ngfft[1]> <ngfft[2]> <ngfft[3]>"
  echo "Optional arguments:"
  echo " -np [number of cores]"
  echo " -nodes [number of total nodes]"
  echo " -ppn [cores per node]"
  echo " -q [Queue Name] (Run job in queue [Queue Name])"
  echo " -f (force a rename of existing output .log file)"
  echo " -emailwhendone (email you when job completes, requires .forward file in
 home directory)"
  echo " -charge [group,fund number] (charge to group and fund, please provide both)"
  exit 1
fi

OUTPUTFILE=${INPUTFILE%.?????}.log
Number='^[0-9]+$'

if ! [[ $NGFFT1 =~ $Number ]]
then
  echo "ngfft[1] is not a number!"
  exit 1
fi

if ! [[ $NGFFT2 =~ $Number ]]
then
  echo "ngfft[2] is not a number!"
  exit 1
fi

if ! [[ $NGFFT3 =~ $Number ]]
then
  echo "ngfft[3] is not a number!"
  exit 1
fi

if [ -f $FILES_FILE_exp ]
then
  echo "File $FILES_FILE_exp found!"
  FILES_FILE="${FILES_FILE_exp}"
  LOG_FILE="${BASE_NAME}_exp.log"
  echo "Files file: $FILES_FILE"
elif [ -f $FILES_FILE_con ]
then
  echo "File $FILES_FILE_con found!"
  FILES_FILE="${FILES_FILE_con}"
  LOG_FILE="${BASE_NAME}_con.log"
  echo "Files file: $FILES_FILE"
elif [ -f $FILES_FILE_eq ]
then
  echo "File $FILES_FILE_eq found!"
  FILES_FILE="${FILES_FILE_eq}"
  LOG_FILE="${BASE_NAME}.log"
  echo "Files file: $FILES_FILE"
else
  echo "None of $FILES_FILE_eq $FILES_FILE_exp $FILES_FILE_con exists. Exit now"
  exit 1
fi

if [ "$FORCERENAME" = "1" ]
then
  mv $OUTPUTFILE $OUTPUTFILE.`date +%s`
  echo "-f argument invoked!"
  echo "$OUTPUTFILE renamed to $OUTPUTFILE.`date +%s`"
elif [ -f $OUTPUTFILE ]
then
  echo "Output file with name $OUTPUTFILE exists."
  echo "Please rename .files input file ($1) or use the -f"
  echo "argument to force a rename."
  exit 1
fi

#
# PARSE AND SET NPROCS
#
if [ $NPROC -gt 20 ]
then
  if [ $NODES -eq 1 ]
    then
        echo "Please set number of nodes with the -nodes argument"
        exit
    fi
fi

rm -rf ngfft_Info JOBInfo JOBID updateNGFFT.log $LOG_FILE

updateNGFFT $FILES_FILE $NGFFT1 $NGFFT2 $NGFFT3 > updateNGFFT.log
qabinit -q $QUEUE -np $NPROC $FILES_FILE > JOBInfo_full
tail -n 1 JOBInfo_full > JOBInfo
rm JOBInfo_full
getJobID
JobID=`cat JOBID`
echo "Job ID is: $JobID"
sleep 120
grep ngfft $LOG_FILE > ngfft_Info
grep ngfft $LOG_FILE
rm -rf $LOG_FILE $OUT_FILE
qdel $JobID
rm -rf JOBID JOBInfo
read_NGFFT_info
head -n 2 ngfft_status
NGFFT_STATUS=`head -n 1 ngfft_status`
#echo "ngfft_status is: $NGFFT_STATUS"
if [ $NGFFT_STATUS -eq 1 ]
then
  #echo "ngfft accepted. Now running ABINIT calculation"
  echo "Now running ABINIT calculation."
  qabinit-runngfft -q $QUEUE -np $NPROC $BASE_NAME $NGFFT1 $NGFFT2 $NGFFT3
elif [ $NGFFT_STATUS -eq 2 ]
then
  echo "ngfft not accepted. Please try another ngfft"
fi
